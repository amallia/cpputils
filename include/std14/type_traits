// -*- C++ -*-
/*
 * Copyright 2014 Nicola Gigante
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef STD14_TYPE_TRAITS_H
#define STD14_TYPE_TRAITS_H

#include "utils/invoke.h"
#include "utils/meta.h"

#include <type_traits>

#if __cplusplus > 201103
namespace std14 = std;
#else

namespace std14 {

using namespace std;
    
// SFINAE-friendly std::result_of
template<typename T, typename = void>
struct result_of;
    
template<typename R, typename ...Args, typename _>
struct result_of<R(Args...), _> { };
    
    namespace details {
        template<typename ...Args>
        using result_of_impl = decltype(utils::invoke(std::declval<Args>()...));
    }
        
template<typename R, typename ...Args>
struct result_of< R(Args...),
                  utils::void_t<details::result_of_impl<R, Args...>>
                >
{
    using type = details::result_of_impl<R, Args...>;
};
    
template<typename ...Args>
    using result_of_t = typename result_of<Args...>::type;
   
// Convenience alias templates for transformation type traits
// const-volatile modifications:
template <class T>
    using remove_const_t = typename std::remove_const<T>::type;

template <class T>
    using remove_volatile_t = typename std::remove_volatile<T>::type;

template <class T>
    using remove_cv_t = typename std::remove_cv<T>::type;
    
template <class T>
    using add_const_t = typename std::add_const<T>::type;
    
template <class T>
    using add_volatile_t = typename std::add_volatile<T>::type;
    
template <class T>
    using add_cv_t = typename std::add_cv<T>::type;
    
// reference modifications:
template <class T>
    using remove_reference_t = typename std::remove_reference<T>::type;
    
template <class T>
    using add_lvalue_reference_t = typename std::add_lvalue_reference<T>::type;
    
template <class T>
    using add_rvalue_reference_t = typename std::add_rvalue_reference<T>::type;

// sign modifications:
template <class T>
    using make_signed_t = typename std::make_signed<T>::type;
    
template <class T>
    using make_unsigned_t = typename std::make_unsigned<T>::type;

// array modifications:
template <class T>
    using remove_extent_t = typename std::remove_extent<T>::type;
    
template <class T>
    using remove_all_extents_t = typename std::remove_all_extents<T>::type;
    
// pointer modifications:
template <class T>
    using remove_pointer_t = typename std::remove_pointer<T>::type;

template <class T>
    using add_pointer_t = typename std::add_pointer<T>::type;

namespace details {
    
    template<size_t Len, size_t Align>
    std::integral_constant<size_t, Align>
    default_align(std::aligned_storage<Len, Align>) {
        return Align;
    }
    
    template<size_t Len>
    constexpr size_t default_align() {
        return decltype(default_align(std::aligned_storage<Len>()))::value;
    }
}
    
// other transformations:
template <std::size_t Len,
          std::size_t Align = details::default_align<Len>()>
    using aligned_storage_t = typename std::aligned_storage<Len, Align>::type;

template <std::size_t Len, class... Types>
    using aligned_union_t = typename std::aligned_union<Len,Types...>::type;
    
template <class T>
    using decay_t = typename std::decay<T>::type;
    
template <bool b, class T = void>
    using enable_if_t = typename std::enable_if<b,T>::type;
    
template <bool b, class T, class F>
    using conditional_t = typename std::conditional<b,T,F>::type;
    
template <class... T>
    using common_type_t = typename std::common_type<T...>::type;
    
template <class T>
    using underlying_type_t = typename std::underlying_type<T>::type;
    
}

#endif // __cplusplus <= 201103

#endif // defined(STD14_TYPE_TRAITS_H__)
