// -*- C++ -*-
/*
 * Copyright 2014 Nicola Gigante
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef STD14_UTILITY_H
#define STD14_UTILITY_H

#include <utility>

#if __cplusplus > 201103
namespace std14 = std;
#else

namespace std14 {

    using namespace std;
    
    // Compile-time integer sequences.
    // Efficient non-trivial implementation directly from libc++
    template<class _Tp, _Tp... _Ip>
    struct integer_sequence
    {
        typedef _Tp value_type;
        static_assert( std::is_integral<_Tp>::value,
                      "std::integer_sequence can only be instantiated with an integral type" );
        static
        constexpr
        size_t
        size() noexcept { return sizeof...(_Ip); }
    };
    
    template<size_t... _Ip>
    using index_sequence = integer_sequence<size_t, _Ip...>;
    
    namespace __detail {
        
        template<typename _Tp, size_t ..._Extra> struct __repeat;
        template<typename _Tp, _Tp ..._Np, size_t ..._Extra> struct __repeat<integer_sequence<_Tp, _Np...>, _Extra...> {
            typedef integer_sequence<_Tp,
            _Np...,
            sizeof...(_Np) + _Np...,
            2 * sizeof...(_Np) + _Np...,
            3 * sizeof...(_Np) + _Np...,
            4 * sizeof...(_Np) + _Np...,
            5 * sizeof...(_Np) + _Np...,
            6 * sizeof...(_Np) + _Np...,
            7 * sizeof...(_Np) + _Np...,
            _Extra...> type;
        };
        
        template<size_t _Np> struct __parity;
        template<size_t _Np> struct __make : __parity<_Np % 8>::template __pmake<_Np> {};
        
        template<> struct __make<0> { typedef integer_sequence<size_t> type; };
        template<> struct __make<1> { typedef integer_sequence<size_t, 0> type; };
        template<> struct __make<2> { typedef integer_sequence<size_t, 0, 1> type; };
        template<> struct __make<3> { typedef integer_sequence<size_t, 0, 1, 2> type; };
        template<> struct __make<4> { typedef integer_sequence<size_t, 0, 1, 2, 3> type; };
        template<> struct __make<5> { typedef integer_sequence<size_t, 0, 1, 2, 3, 4> type; };
        template<> struct __make<6> { typedef integer_sequence<size_t, 0, 1, 2, 3, 4, 5> type; };
        template<> struct __make<7> { typedef integer_sequence<size_t, 0, 1, 2, 3, 4, 5, 6> type; };
        
        template<> struct __parity<0> { template<size_t _Np> struct __pmake : __repeat<typename __make<_Np / 8>::type> {}; };
        template<> struct __parity<1> { template<size_t _Np> struct __pmake : __repeat<typename __make<_Np / 8>::type, _Np - 1> {}; };
        template<> struct __parity<2> { template<size_t _Np> struct __pmake : __repeat<typename __make<_Np / 8>::type, _Np - 2, _Np - 1> {}; };
        template<> struct __parity<3> { template<size_t _Np> struct __pmake : __repeat<typename __make<_Np / 8>::type, _Np - 3, _Np - 2, _Np - 1> {}; };
        template<> struct __parity<4> { template<size_t _Np> struct __pmake : __repeat<typename __make<_Np / 8>::type, _Np - 4, _Np - 3, _Np - 2, _Np - 1> {}; };
        template<> struct __parity<5> { template<size_t _Np> struct __pmake : __repeat<typename __make<_Np / 8>::type, _Np - 5, _Np - 4, _Np - 3, _Np - 2, _Np - 1> {}; };
        template<> struct __parity<6> { template<size_t _Np> struct __pmake : __repeat<typename __make<_Np / 8>::type, _Np - 6, _Np - 5, _Np - 4, _Np - 3, _Np - 2, _Np - 1> {}; };
        template<> struct __parity<7> { template<size_t _Np> struct __pmake : __repeat<typename __make<_Np / 8>::type, _Np - 7, _Np - 6, _Np - 5, _Np - 4, _Np - 3, _Np - 2, _Np - 1> {}; };
        
        template<typename _Tp, typename _Up> struct __convert {
            template<typename> struct __result;
            template<_Tp ..._Np> struct __result<integer_sequence<_Tp, _Np...> > { typedef integer_sequence<_Up, _Np...> type; };
        };
        template<typename _Tp> struct __convert<_Tp, _Tp> { template<typename _Up> struct __result { typedef _Up type; }; };
        
    }
    
    template<typename _Tp, _Tp _Np> using __make_integer_sequence_unchecked =
    typename __detail::__convert<size_t, _Tp>::template __result<typename __detail::__make<_Np>::type>::type;
    
    template <class _Tp, _Tp _Ep>
    struct __make_integer_sequence
    {
        static_assert(std::is_integral<_Tp>::value,
                      "std::make_integer_sequence can only be instantiated with an integral type" );
        static_assert(0 <= _Ep, "std::make_integer_sequence input shall not be negative");
        typedef __make_integer_sequence_unchecked<_Tp, _Ep> type;
    };
    
    template<class _Tp, _Tp _Np>
    using make_integer_sequence = typename __make_integer_sequence<_Tp, _Np>::type;
    
    template<size_t _Np>
    using make_index_sequence = make_integer_sequence<size_t, _Np>;
    
    template<class... _Tp>
    using index_sequence_for = make_index_sequence<sizeof...(_Tp)>;
    
}

#endif // __cplusplus <= 201103

#endif // defined(STD14_UTILITY_H__)
