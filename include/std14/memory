// -*- C++ -*-
/*
 * Copyright 2014 Nicola Gigante
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef STD14_MEMORY_H
#define STD14_MEMORY_H

#include <memory>

#if __cplusplus > 201103
namespace std14 = std;
#else

#include <utility>

namespace std14 {
    
using namespace std;
    
// make_unique - standard compliant implementation directly from libc++
template<class Tp>
struct make_unique_tag
{
    typedef std::unique_ptr<Tp> simple;
};

template<class Tp>
struct make_unique_tag<Tp[]>
{
    typedef std::unique_ptr<Tp[]> array_unknown_bound;
};

template<class Tp, size_t _Np>
struct make_unique_tag<Tp[_Np]>
{
    typedef void array_known_bound;
};

template<class Tp, class... Args,
    typename = typename std::enable_if<std::is_constructible<Tp, Args...>::value>::type>
inline
typename make_unique_tag<Tp>::simple
make_unique(Args&&... args)
{
    return std::unique_ptr<Tp>(new Tp(std::forward<Args>(args)...));
}

template<class Tp>
inline
typename make_unique_tag<Tp>::array_unknown_bound
make_unique(size_t n)
{
    typedef typename std::remove_extent<Tp>::type _Up;
    return std::unique_ptr<Tp>(new _Up[n]());
}

template<class Tp, class... Args>
typename make_unique_tag<Tp>::array_known_bound
make_unique(Args&&...) = delete;

}

#endif // __cplusplus <= 201103

#endif // defined(STD14_MEMORY_H__)
